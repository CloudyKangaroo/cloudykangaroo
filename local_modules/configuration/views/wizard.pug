extends /layout
block head
    include /datatables_css

block content
    .row
        .page-header
            h1 Node Configuration Wizard 
    .row
        .panel#deploymentForm.panel-default
            .panel-heading Deployment Configuration
            .panel-body
              form.margin-bottom-40(role='form')
              .col-xs-7.col-md-5
               .form-group
               label(for='mobs') MOBS
               |  
               input#mobsTxtInput.form-control(type='text')
               |  
               .form-group
               label(for='dpsTxtInput') DPS
               |  
               input#dpsTxtInput.form-control(type='text')
               |  
               .checkbox
               label
               input(type='checkbox')
               |  HA
               |  
               .form-group
               label(for='dpsTxtInput') Retention Period
               |  
               .radio
                label
                input#retentionRadiosMin(type='radio', name='retentionPeriod', value='15 min', checked='')
                | 15 min
               .radio
                label
                input#retentionRadiosHour(type='radio', name='retentionPeriod', value='1 hour')
                | 1 hour
               .radio
                label
                input#retentionRadiosDay(type='radio', name='retentionPeriod', value='1 day')
                | 1 Day
    .row#calculateContainer
        button#calculateBtn.btn.btn-primary(type='button', style='float:right') Calculate

    .row
        .panel#vmWareForm.panel-default(style='display:none')
            .panel-heading VM Ware
            .panel-body
              form.margin-bottom-40(role='form')
              .col-xs-7.col-md-5
                .form-group
                label(for='ovfTxtInput') Base OVF
                |  
                input#ovfTxtInput.form-control(type='text', placeholder='URL')
                .col-xs-7.col-md-5
                table.table.borderless
                  thead
                    tr
                      th
                      |                                 
                      th CPU
                      |                                 
                      th MEM
                      |                                 
                      th I/O
                    |                         
                  tbody#vmwarePageBody

    .row
        .panel#resultPage.panel-default(style='display:none')
            .panel-heading Results
            .panel-body
              form.inputForm(role='form')
                .form-group
                table.table.borderless
                  thead#resultPageHeader
                      
                    |                         
                  tbody#resultPageBody
                      

    .row#priviewBtnContainer(style='display:none')
        button#previewBackBtn.btn.btn-primary(type='button', style='float:left') Back    
        button#previewBtn.btn.btn-primary(type='button', style='float:right') Preview
    .row#generateContainer(style='display:none')
        button#backBtn.btn.btn-primary(type='button', style='float:left') Back
        button#generatBtn.btn.btn-primary(type='button', style='float:right') Generate

block footer
    include /datatables_js
    script(type='text/javascript').
        $(document).ready(function () {
        
        var nodeList = [];
        var updatedServiceList = [];
        var services = !{JSON.stringify(configuration.services)};
            function search(nameKey, myArray)
            {
              for (var i=0; i < myArray.length; i++) 
              {
                if (myArray[i].serviceName === nameKey) 
                {
                  return myArray[i];
                }
              }
            };
            function populateTableOnPreviewPage(serviceList,updatedServiceList,nodeList)
            {
              var row = "";
                var header = $("#resultPageHeader").empty();
                row = $("<tr><th>Services</th></tr>");
                $.each(serviceList,function(rowIndex,item){
                  row.append($("<th title='"+item.serviceName+"'/>").text(item.serviceName));
                });
                header.append(row);
                
                var tbody = $("#resultPageBody").empty();
                row = $("<tr><td style='text-align: left;font-weight: bold;'>Needed</td></tr>");
                $.each(serviceList,function(rowIndex,item){
                  row.append($("<td/>").text(item.totalMemory));
                });
                tbody.append(row);
                row = $("<tr><td style='text-align: left;font-weight: bold;'>Alloted</td></tr>");
                $.each(updatedServiceList,function(rowIndex,item){
                  row.append($("<td/>").text(item.totalMemory));
                });
                tbody.append(row);
                
                $.each(nodeList,function(rowIndex,item){
                  row = $("<tr><td style='text-align: left;'>"+item.name+"</td></tr>");
                  $.each(services,function(rowIndex1,item1){
                  
                    if(item.services.indexOf(item1.serviceName)!=-1)
                      row.append($("<td><input id='"+rowIndex+"_"+rowIndex1+"' type='checkbox' checked/></td>"));
                    else
                      row.append($("<td><input id='"+rowIndex+"_"+rowIndex1+"' type='checkbox' /></td>"));
                  });
                  tbody.append(row);
                });
            };
            $("#resultPageBody").on("change", "input[type='checkbox']", function(evt){
              var nodeRowIndex = evt.target.id.split('_')[0];
              var serviceColumnIndex = evt.target.id.split('_')[1];
              if (this.checked)
              {
              	 nodeList[nodeRowIndex].services.push(updatedServiceList[serviceColumnIndex].serviceName);
                 updatedServiceList[serviceColumnIndex].totalMemory = Number(updatedServiceList[serviceColumnIndex].totalMemory)+Number(updatedServiceList[serviceColumnIndex].MPN);
              } 
              else 
              {
                 var index = nodeList[nodeRowIndex].services.indexOf(updatedServiceList[serviceColumnIndex].serviceName);    
                 if (index !== -1) 
                 {
                   nodeList[nodeRowIndex].services.splice(index, 1);
                 }
                 updatedServiceList[serviceColumnIndex].totalMemory = Number(updatedServiceList[serviceColumnIndex].totalMemory)-Number(updatedServiceList[serviceColumnIndex].MPN);
              } 
              console.log(services);
              populateTableOnPreviewPage(services,updatedServiceList,nodeList);
            });
            $("#calculateBtn").click(function () {
                var mobs = $("#mobsTxtInput").val();
                updatedServiceList = [];
                var totalNoOfNode  = 0;
                var totalMemory = 0;
                for(i=0;i<services.length;i++)
                {
                  var obj = jQuery.extend({}, services[i]);//services[i];
                  if(Number(obj.memoryThreshold))
                  {
                    obj.NON = mobs/obj.memoryThreshold;
                    obj.totalMemory =(isNaN(obj.MPN))?"NA":obj.MPN*obj.NON;
                  }
                  updatedServiceList.push(obj);
                  totalNoOfNode += Number(obj.NON);
                  if(!isNaN(obj.totalMemory))
                  {
                    totalMemory += Number(obj.totalMemory);
                  }
                }
                nodeList = [];
                var memorySize = [12,36,24,24];
                var item1 = search('ZooKeeper',updatedServiceList);
                var item2 = search('HDFS Data Node',updatedServiceList);
                var item3 = search('Kafka',updatedServiceList);
                var item4 = search('Datapipeline',updatedServiceList);
                var tempArray = [item1,item2,item3,item4];
                var nodeIndx = 0;
                for(var i=0;i<tempArray.length;i++)
                {
                  var noOfNode = tempArray[i].NON;
                  for(var k=0;k<noOfNode;k++)
                  {
                    var node = {};
                    node.name = "node00"+(nodeIndx+1);
                    node.MEM = memorySize[i];
                    node.allotedMem = 0;
                    node.services = [];
                    for(var l=0; l<updatedServiceList.length;l++)
                    {
                      var allocatedM = Number(node.allotedMem)+Number(updatedServiceList[l].MPN);
                      if(Number(allocatedM)<Number(node.MEM) && Number(updatedServiceList[l].NON)>0)
                      {
            	        node.allotedMem = allocatedM;
                        node.services.push(updatedServiceList[l].serviceName);
                        updatedServiceList[l].NON = Number(updatedServiceList[l].NON)-1;
                      }
                    }
                    nodeList.push(node);
                    nodeIndx++;
                  }
                }
               // console.log(nodeList);
                
                var row = "";
                var tbody = $("#vmwarePageBody").empty();
                $.each(nodeList,function(rowIndex,item){
                  row = $("<tr/>");
                  row.append($("<td/>").text(item.name));
                  row.append("<td><input type='text' value='8'/></td>");
                  row.append("<td><input type='text' value='"+item.MEM+"'/></td>");
                  row.append("<td><input type='text'/></td>");
                  tbody.append(row);
                });
                
                $("#deploymentForm").hide();
                $("#calculateContainer").hide();
                $("#vmWareForm").show();
                $("#priviewBtnContainer").show();
            });
            $("#previewBtn").click(function () {
            	$("#vmWareForm").hide();
            	$("#priviewBtnContainer").hide();
                $("#resultPage").show();
                $("#generateContainer").show();
                populateTableOnPreviewPage(services,updatedServiceList,nodeList);
            });
            
            $("#previewBackBtn").click(function () {
            	$("#deploymentForm").show();
            	$("#vmWareForm").hide();
            	$("#calculateContainer").show();
            	$("#priviewBtnContainer").hide();
            });
            $("#backBtn").click(function () {
            	$("#vmWareForm").show();
            	$("#priviewBtnContainer").show();
                $("#resultPage").hide();
                $("#generateContainer").hide();
            });
            $("#generatBtn").click(function () {
                var url = 'data:text/json;charset=utf8,' + encodeURIComponent(JSON.stringify(nodeList) );
                window.open(url);
            });
        });